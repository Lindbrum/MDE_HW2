package UniStudy.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_BachelorDegree;
  private ConceptPresentation props_CareerManagement;
  private ConceptPresentation props_Course;
  private ConceptPresentation props_CourseRef;
  private ConceptPresentation props_DegreeCourse;
  private ConceptPresentation props_DegreeCourseRef;
  private ConceptPresentation props_Department;
  private ConceptPresentation props_Evaluation;
  private ConceptPresentation props_EvaluationRef;
  private ConceptPresentation props_ExaminationCall;
  private ConceptPresentation props_Master;
  private ConceptPresentation props_MasterDegree;
  private ConceptPresentation props_News;
  private ConceptPresentation props_PhD;
  private ConceptPresentation props_PostGraduateCourse;
  private ConceptPresentation props_Professor;
  private ConceptPresentation props_ProfessorRef;
  private ConceptPresentation props_Student;
  private ConceptPresentation props_Thesis;
  private ConceptPresentation props_ThesisRef;
  private ConceptPresentation props_User;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.BachelorDegree:
        if (props_BachelorDegree == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A bachelor degree.");
          cpb.rawPresentation("bachelor");
          props_BachelorDegree = cpb.create();
        }
        return props_BachelorDegree;
      case LanguageConceptSwitch.CareerManagement:
        if (props_CareerManagement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("CareerManagement");
          props_CareerManagement = cpb.create();
        }
        return props_CareerManagement;
      case LanguageConceptSwitch.Course:
        if (props_Course == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A course held by the university. It has one or examination calls and is held by one or more professors.");
          cpb.rawPresentation("Course");
          props_Course = cpb.create();
        }
        return props_Course;
      case LanguageConceptSwitch.CourseRef:
        if (props_CourseRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wrapper for a course reference.");
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x42956696c652c0c0L, 0x42956696c652c0c1L, "course", "", "");
          props_CourseRef = cpb.create();
        }
        return props_CourseRef;
      case LanguageConceptSwitch.DegreeCourse:
        if (props_DegreeCourse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A degree course (bachelor, master or post-graduate course). It has a catalog of courses to select from.");
          props_DegreeCourse = cpb.create();
        }
        return props_DegreeCourse;
      case LanguageConceptSwitch.DegreeCourseRef:
        if (props_DegreeCourseRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wrapper concept for a reference to a degree course (since MPS does not allow 1..n references)");
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x78359f29b5c5d0d2L, 0x78359f29b5c5d0d3L, "degree_course", "", "");
          props_DegreeCourseRef = cpb.create();
        }
        return props_DegreeCourseRef;
      case LanguageConceptSwitch.Department:
        if (props_Department == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A department of the university. A department offers several degree courses and can list news for all students to see.");
          cpb.rawPresentation("Department");
          props_Department = cpb.create();
        }
        return props_Department;
      case LanguageConceptSwitch.Evaluation:
        if (props_Evaluation == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The result of an examination call for a student. Contains a grade that ranges from \"1\" to \"30 cum laude\" (30L) and report (or feedback) from the teacher");
          cpb.rawPresentation("Evaluation");
          props_Evaluation = cpb.create();
        }
        return props_Evaluation;
      case LanguageConceptSwitch.EvaluationRef:
        if (props_EvaluationRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x4e171c53eb93f021L, 0x4e171c53eb93f022L, "evaluation", "", "");
          props_EvaluationRef = cpb.create();
        }
        return props_EvaluationRef;
      case LanguageConceptSwitch.ExaminationCall:
        if (props_ExaminationCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("An examination call for a course, with a date, the room and the type of exam");
          cpb.rawPresentation("Exam");
          props_ExaminationCall = cpb.create();
        }
        return props_ExaminationCall;
      case LanguageConceptSwitch.Master:
        if (props_Master == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A post-graduate master. They can be first or second level (reserved to bachelor and master degree graduates, respectively).");
          cpb.rawPresentation("Master");
          props_Master = cpb.create();
        }
        return props_Master;
      case LanguageConceptSwitch.MasterDegree:
        if (props_MasterDegree == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A master degree.");
          cpb.rawPresentation("MasterDegree");
          props_MasterDegree = cpb.create();
        }
        return props_MasterDegree;
      case LanguageConceptSwitch.News:
        if (props_News == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A news posted by a professor referring to either a department or the university as a whole.");
          cpb.rawPresentation("News");
          props_News = cpb.create();
        }
        return props_News;
      case LanguageConceptSwitch.PhD:
        if (props_PhD == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A PhD (philosophiae doctor) course.");
          cpb.rawPresentation("PhD");
          props_PhD = cpb.create();
        }
        return props_PhD;
      case LanguageConceptSwitch.PostGraduateCourse:
        if (props_PostGraduateCourse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A course reserved to post graduates. Can be a master or PhD.");
          props_PostGraduateCourse = cpb.create();
        }
        return props_PostGraduateCourse;
      case LanguageConceptSwitch.Professor:
        if (props_Professor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A teacher for the university. Can hold courses as well as coordinating degree and post-graduate courses.");
          cpb.rawPresentation("prof");
          props_Professor = cpb.create();
        }
        return props_Professor;
      case LanguageConceptSwitch.ProfessorRef:
        if (props_ProfessorRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wrapper concept for a reference to a professor (since MPS does not allow 1..n references)");
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x78359f29b5c5d008L, 0x78359f29b5c5d009L, "professor", "", "");
          props_ProfessorRef = cpb.create();
        }
        return props_ProfessorRef;
      case LanguageConceptSwitch.Student:
        if (props_Student == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.rawPresentation("Student");
          props_Student = cpb.create();
        }
        return props_Student;
      case LanguageConceptSwitch.Thesis:
        if (props_Thesis == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A thesis defended by a student that graduated. It was supervised by a professor.");
          cpb.rawPresentation("Thesis");
          props_Thesis = cpb.create();
        }
        return props_Thesis;
      case LanguageConceptSwitch.ThesisRef:
        if (props_ThesisRef == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wrapper for a reference to a thesis.");
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x4e171c53eb93f01cL, 0x4e171c53eb93f01dL, "thesis", "", "");
          props_ThesisRef = cpb.create();
        }
        return props_ThesisRef;
      case LanguageConceptSwitch.User:
        if (props_User == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A generic user of the university, might be a student or a professor");
          props_User = cpb.create();
        }
        return props_User;
    }
    return null;
  }
}
