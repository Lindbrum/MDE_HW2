package UniStudy.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.ConceptPresentationAspectBase;
import jetbrains.mps.smodel.runtime.ConceptPresentation;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.ConceptPresentationBuilder;

public class ConceptPresentationAspectImpl extends ConceptPresentationAspectBase {
  private ConceptPresentation props_Career;
  private ConceptPresentation props_CareerManagement;
  private ConceptPresentation props_Course;
  private ConceptPresentation props_CourseReference;
  private ConceptPresentation props_CustomEnumeration;
  private ConceptPresentation props_DegreeCourse;
  private ConceptPresentation props_DegreeCourseReference;
  private ConceptPresentation props_Department;
  private ConceptPresentation props_ExaminationCall;
  private ConceptPresentation props_ExaminationCallReference;
  private ConceptPresentation props_ExtraInfo;
  private ConceptPresentation props_News;
  private ConceptPresentation props_NewsReference;
  private ConceptPresentation props_PassingGrade;
  private ConceptPresentation props_PassingGradeReference;
  private ConceptPresentation props_PostGraduateCourse;
  private ConceptPresentation props_Professor;
  private ConceptPresentation props_ProfessorReference;
  private ConceptPresentation props_Student;
  private ConceptPresentation props_StudentReference;
  private ConceptPresentation props_Thesis;
  private ConceptPresentation props_ThesisReference;
  private ConceptPresentation props_University;
  private ConceptPresentation props_User;

  @Override
  @Nullable
  public ConceptPresentation getDescriptor(SAbstractConcept c) {
    StructureAspectDescriptor structureDescriptor = (StructureAspectDescriptor) myLanguageRuntime.getAspect(jetbrains.mps.smodel.runtime.StructureAspectDescriptor.class);
    switch (structureDescriptor.internalIndex(c)) {
      case LanguageConceptSwitch.Career:
        if (props_Career == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Career = cpb.create();
        }
        return props_Career;
      case LanguageConceptSwitch.CareerManagement:
        if (props_CareerManagement == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CareerManagement = cpb.create();
        }
        return props_CareerManagement;
      case LanguageConceptSwitch.Course:
        if (props_Course == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A course held by the university. It has one or more examination calls and is held by one or more professors");
          cpb.presentationByName();
          props_Course = cpb.create();
        }
        return props_Course;
      case LanguageConceptSwitch.CourseReference:
        if (props_CourseReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wrapper for a course reference.");
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x42956696c652c0c0L, 0x42956696c652c0c1L, "course", "", "");
          props_CourseReference = cpb.create();
        }
        return props_CourseReference;
      case LanguageConceptSwitch.CustomEnumeration:
        if (props_CustomEnumeration == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_CustomEnumeration = cpb.create();
        }
        return props_CustomEnumeration;
      case LanguageConceptSwitch.DegreeCourse:
        if (props_DegreeCourse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A degree course (bachelor, master or post-graduate course). It has a catalog of courses to select from.");
          cpb.presentationByName();
          props_DegreeCourse = cpb.create();
        }
        return props_DegreeCourse;
      case LanguageConceptSwitch.DegreeCourseReference:
        if (props_DegreeCourseReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wrapper concept for a reference to a degree course (since MPS does not allow 1..n references). Changing this reference automatically updated the list of students of the degree course (THIS DOESN'T WORK WHEN ONLY DELETING A REFERENCE AS PER MPS SET HANDLER, which requires manual deletion.)");
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x78359f29b5c5d0d2L, 0x78359f29b5c5d0d3L, "degree_course", "", "");
          props_DegreeCourseReference = cpb.create();
        }
        return props_DegreeCourseReference;
      case LanguageConceptSwitch.Department:
        if (props_Department == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A department of the university. A department offers several degree courses and can list news for all students to see.");
          cpb.presentationByName();
          props_Department = cpb.create();
        }
        return props_Department;
      case LanguageConceptSwitch.ExaminationCall:
        if (props_ExaminationCall == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("An examination call for a course, with a date, the room and the type of exam. Has a list of students that booked.");
          cpb.presentationByName();
          props_ExaminationCall = cpb.create();
        }
        return props_ExaminationCall;
      case LanguageConceptSwitch.ExaminationCallReference:
        if (props_ExaminationCallReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x13cf5a8b21e5c42cL, 0x13cf5a8b21e5c42dL, "call", "", "");
          props_ExaminationCallReference = cpb.create();
        }
        return props_ExaminationCallReference;
      case LanguageConceptSwitch.ExtraInfo:
        if (props_ExtraInfo == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_ExtraInfo = cpb.create();
        }
        return props_ExtraInfo;
      case LanguageConceptSwitch.News:
        if (props_News == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A news posted by a professor referring to either a department or the university as a whole.");
          cpb.presentationByName();
          props_News = cpb.create();
        }
        return props_News;
      case LanguageConceptSwitch.NewsReference:
        if (props_NewsReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Smart reference for news");
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x54ae37f9007110edL, 0x54ae37f9007110eeL, "news", "", "");
          props_NewsReference = cpb.create();
        }
        return props_NewsReference;
      case LanguageConceptSwitch.PassingGrade:
        if (props_PassingGrade == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The result of an examination call for a student. Contains a grade that ranges from \"1\" to \"30 cum laude\" (30L) and report (or feedback) from the teacher");
          cpb.presentationByName();
          props_PassingGrade = cpb.create();
        }
        return props_PassingGrade;
      case LanguageConceptSwitch.PassingGradeReference:
        if (props_PassingGradeReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x13cf5a8b21e5c443L, 0x13cf5a8b21e5c444L, "grade", "", "");
          props_PassingGradeReference = cpb.create();
        }
        return props_PassingGradeReference;
      case LanguageConceptSwitch.PostGraduateCourse:
        if (props_PostGraduateCourse == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A course reserved to post graduates. Can be a master or PhD.");
          props_PostGraduateCourse = cpb.create();
        }
        return props_PostGraduateCourse;
      case LanguageConceptSwitch.Professor:
        if (props_Professor == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A teacher for the university. Can hold courses as well as coordinating degree and post-graduate courses.");
          cpb.presentationByName();
          props_Professor = cpb.create();
        }
        return props_Professor;
      case LanguageConceptSwitch.ProfessorReference:
        if (props_ProfessorReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wrapper concept for a reference to a professor (since MPS does not allow 1..n references)");
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x78359f29b5c5d008L, 0x78359f29b5c5d009L, "professor", "", "");
          props_ProfessorReference = cpb.create();
        }
        return props_ProfessorReference;
      case LanguageConceptSwitch.Student:
        if (props_Student == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByName();
          props_Student = cpb.create();
        }
        return props_Student;
      case LanguageConceptSwitch.StudentReference:
        if (props_StudentReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x13cf5a8b21e5c413L, 0x13cf5a8b21e5c414L, "student", "", "");
          props_StudentReference = cpb.create();
        }
        return props_StudentReference;
      case LanguageConceptSwitch.Thesis:
        if (props_Thesis == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A thesis defended by a student that graduated. It was supervised by a professor.");
          cpb.presentationByName();
          props_Thesis = cpb.create();
        }
        return props_Thesis;
      case LanguageConceptSwitch.ThesisReference:
        if (props_ThesisReference == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("Wrapper for a reference to a thesis.");
          cpb.presentationByReference(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x4e171c53eb93f01cL, 0x4e171c53eb93f01dL, "thesis", "", "");
          props_ThesisReference = cpb.create();
        }
        return props_ThesisReference;
      case LanguageConceptSwitch.University:
        if (props_University == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("The university this model refers to, with departments holding various degree courses. It has a rector.");
          cpb.presentationByName();
          props_University = cpb.create();
        }
        return props_University;
      case LanguageConceptSwitch.User:
        if (props_User == null) {
          ConceptPresentationBuilder cpb = new ConceptPresentationBuilder();
          cpb.shortDesc("A generic user of the university, might be a student or a professor");
          props_User = cpb.create();
        }
        return props_User;
    }
    return null;
  }
}
