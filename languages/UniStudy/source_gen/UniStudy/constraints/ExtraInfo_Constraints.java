package UniStudy.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.logging.Logger;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.smodel.runtime.CheckingNodeContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.SNodePointer;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Objects;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.lang.smodel.EnumerationLiteralsIndex;
import org.jetbrains.mps.openapi.language.SConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SReferenceLink;

public class ExtraInfo_Constraints extends BaseConstraintsDescriptor {
  private static final Logger LOG = Logger.getLogger(ExtraInfo_Constraints.class);
  public ExtraInfo_Constraints() {
    super(CONCEPTS.ExtraInfo$oA);
  }

  public static class Value_Property extends BasePropertyConstraintsDescriptor {
    public Value_Property(ConstraintsDescriptor container) {
      super(PROPS.value$7X7d, container, false, false, true);
    }
    @Override
    public boolean validateValue(SNode node, Object propertyValue, CheckingNodeContext checkingNodeContext) {
      boolean result = staticValidateProperty(node, SPropertyOperations.castString(propertyValue));
      if (!(result) && checkingNodeContext != null) {
        checkingNodeContext.setBreakingNode(new SNodePointer("r:33dc6f87-d09c-4bff-860e-bccce74c2e6c(UniStudy.constraints)", "8642064510072588132"));
      }
      return result;
    }
    private static boolean staticValidateProperty(SNode node, String propertyValue) {

      final String SEPARATOR = ",";

      if (SPropertyOperations.getInteger(node, PROPS.lower_multiplicity$aGPU) > 0 && (propertyValue == null || propertyValue.length() == 0)) {
        return false;
      }
      String[] arr;

      try {
        arr = propertyValue.split(SEPARATOR);
        if (arr.length > SPropertyOperations.getInteger(node, PROPS.higher_multiplicity$aHLY)) {
          return false;
        }

        switch (enumSwitchIndex.indexNullable(SPropertyOperations.getEnum(node, PROPS.type$7X_f))) {
          case 0:
            if (LOG.isInfoLevel()) {
              LOG.info("SWITCH - STRING");
            }
            break;
          case 1:
            if (LOG.isInfoLevel()) {
              LOG.info("SWITCH - INT");
            }
            try {
              for (String value : arr) {
                Integer.parseInt(value);
              }
            } catch (NumberFormatException ex) {
              return false;
            }
            break;
          case 2:
            try {
              for (String value : arr) {
                Float.parseFloat(value);
              }
            } catch (NumberFormatException ex) {
              return false;
            }
            break;
          case 3:
            try {
              for (String value : arr) {
                Double.parseDouble(value);
              }
            } catch (NumberFormatException ex) {
              return false;
            }
            break;
          case 4:
            for (String value : arr) {
              if (!("true".equalsIgnoreCase(value)) && !("false".equalsIgnoreCase(value))) {
                return false;
              }
            }
            break;
          case 5:
            {
              SNode customEnumeration = SLinkOperations.getTarget(node, LINKS.custom_enum$b2cl);
              String[] enum_values = SPropertyOperations.getString(customEnumeration, PROPS.values$b1cS).split(SEPARATOR);
              boolean found;
              for (String value : arr) {
                found = false;
                for (String enum_val : enum_values) {
                  if (Objects.equals(value, enum_val)) {
                    found = true;
                    break;
                  }
                }
                if (!(found)) {
                  return false;
                }
              }
              break;
            }
          default:
            return false;
        }

      } catch (NullPointerException ex) {
        /*
          Do nothing

        */

        return false;
      }


      return true;
    }
  }
  public static class Higher_multiplicity_Property extends BasePropertyConstraintsDescriptor {
    public Higher_multiplicity_Property(ConstraintsDescriptor container) {
      super(PROPS.higher_multiplicity$aHLY, container, false, true, false);
    }
    @Override
    public void setPropertyValue(SNode node, Object propertyValue) {
      staticSetPropertyValue(node, SPropertyOperations.castInteger(propertyValue));
    }
    private static void staticSetPropertyValue(SNode node, int propertyValue) {
      if (propertyValue == 0) {
        SPropertyOperations.assign(node, PROPS.higher_multiplicity$aHLY, Integer.MAX_VALUE);
      } else {
        SPropertyOperations.assign(node, PROPS.higher_multiplicity$aHLY, propertyValue);
      }
    }
  }
  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(PROPS.value$7X7d, new Value_Property(this));
    properties.put(PROPS.higher_multiplicity$aHLY, new Higher_multiplicity_Property(this));
    return properties;
  }
  private static final EnumerationLiteralsIndex enumSwitchIndex = EnumerationLiteralsIndex.build(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x18b564b5ef67a403L, 0x18b564b5ef67a404L, 0x18b564b5ef67a405L, 0x18b564b5ef67a408L, 0x18b564b5ef67a40cL, 0x18b564b5ef67a411L, 0x18b564b5ef67a417L);

  private static final class CONCEPTS {
    /*package*/ static final SConcept ExtraInfo$oA = MetaAdapterFactory.getConcept(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x18b564b5ef67a3fbL, "UniStudy.structure.ExtraInfo");
  }

  private static final class PROPS {
    /*package*/ static final SProperty value$7X7d = MetaAdapterFactory.getProperty(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x18b564b5ef67a3fbL, 0x18b564b5ef67a3feL, "value");
    /*package*/ static final SProperty lower_multiplicity$aGPU = MetaAdapterFactory.getProperty(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x18b564b5ef67a3fbL, 0x18b564b5ef67a421L, "lower_multiplicity");
    /*package*/ static final SProperty higher_multiplicity$aHLY = MetaAdapterFactory.getProperty(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x18b564b5ef67a3fbL, 0x18b564b5ef67a425L, "higher_multiplicity");
    /*package*/ static final SProperty values$b1cS = MetaAdapterFactory.getProperty(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x18b564b5ef67a430L, 0x18b564b5ef67a433L, "values");
    /*package*/ static final SProperty type$7X_f = MetaAdapterFactory.getProperty(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x18b564b5ef67a3fbL, 0x18b564b5ef67a400L, "type");
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink custom_enum$b2cl = MetaAdapterFactory.getReferenceLink(0x6d0cfce3b6ce4188L, 0xa63493977a58376fL, 0x18b564b5ef67a3fbL, 0x18b564b5ef67a43dL, "custom_enum");
  }
}
